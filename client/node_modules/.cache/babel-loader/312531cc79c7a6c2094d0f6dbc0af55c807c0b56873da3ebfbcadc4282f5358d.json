{"ast":null,"code":"import axios from 'axios';\nimport { API_NOTIFICATION_MESSAGES } from '../constants/config';\n// import { SERVICE_URLS } from '../constants/config';\n\nconst API_URL = 'http://localhost:8000';\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"content-type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(function (config) {\n  console.log(config.data);\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  // Stop global loader here\n  return processResponse(response);\n}, function (error) {\n  // Stop global loader here\n  return Promise.reject(ProcessError(error));\n});\n\n///////////////////////////////\n// If success -> returns { isSuccess: true, data: object }\n// If fail -> returns { isFailure: true, status: int, msg: string }\n//////////////////////////////\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: response === null || response === void 0 ? void 0 : response.msg\n    };\n  }\n};\n\n///////////////////////////////\n// If success -> returns { isSuccess: true, data: object }\n// If fail -> returns { isError: true, status: string, msg: string, code: int }\n//////////////////////////////\nconst ProcessError = async error => {\n  if (error.response) {\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.responseFailure,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    console.log(\"ERROR IN REQUEST: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\n      code: \"\"\n    };\n  } else {\n    console.log(\"NETWORK ERROR: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.networkError,\n      code: \"\"\n    };\n  }\n};\n_c = ProcessError;\nconst API = {\n  userSignup: data => {\n    return axiosInstance.post('/signup', data);\n  }\n};\n\n// for (const [key, value] of Object.entries(SERVICE_URLS)) {\n//     API[key] = (body, showUploadProgress, showDownloadProgress) =>\n//         axiosInstance({\n//             method: value.method,\n//             url: value.url,\n//             data: value.method === 'DELETE' ? {} : body,\n//             responseType: value.responseType,\n//             // TYPE: getType(value, body),\n//             onUploadProgress: function(progressEvent) {\n//                 if (showUploadProgress) {\n//                     let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n//                     showUploadProgress(percentCompleted);\n//                 }\n//             },\n//             onDownloadProgress: function(progressEvent) {\n//                 if (showDownloadProgress) {\n//                     let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n//                     showDownloadProgress(percentCompleted);\n//                 }\n//             }\n//         });\n// }\n\nexport { API };\nvar _c;\n$RefreshReg$(_c, \"ProcessError\");","map":{"version":3,"names":["axios","API_NOTIFICATION_MESSAGES","API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","console","log","data","error","Promise","reject","response","processResponse","ProcessError","status","isSuccess","isFailure","msg","toJSON","isError","responseFailure","code","requestFailure","networkError","_c","API","userSignup","post","$RefreshReg$"],"sources":["C:/Users/hp/Desktop/WebD projects/Blog-Application/client/src/service/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { API_NOTIFICATION_MESSAGES } from '../constants/config';\r\n// import { SERVICE_URLS } from '../constants/config';\r\n\r\nconst API_URL = 'http://localhost:8000';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    timeout: 10000,\r\n    headers: {\r\n        \"content-type\": \"application/json\"\r\n    }\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    function(config) {\r\n        console.log(config.data);\r\n        return config;\r\n    },\r\n    function(error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n    function(response) {\r\n        // Stop global loader here\r\n        return processResponse(response);\r\n    },\r\n    function(error) {\r\n        // Stop global loader here\r\n        return Promise.reject(ProcessError(error));\r\n    }\r\n);\r\n\r\n///////////////////////////////\r\n// If success -> returns { isSuccess: true, data: object }\r\n// If fail -> returns { isFailure: true, status: int, msg: string }\r\n//////////////////////////////\r\nconst processResponse = (response) => {\r\n    if (response?.status === 200) {\r\n        return { isSuccess: true, data: response.data }\r\n    } else {\r\n        return {\r\n            isFailure: true,\r\n            status: response?.status,\r\n            msg: response?.msg\r\n        }\r\n    }\r\n}\r\n\r\n///////////////////////////////\r\n// If success -> returns { isSuccess: true, data: object }\r\n// If fail -> returns { isError: true, status: string, msg: string, code: int }\r\n//////////////////////////////\r\nconst ProcessError = async (error) => {\r\n    if (error.response) {\r\n        console.log(\"ERROR IN RESPONSE: \", error.toJSON());\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATION_MESSAGES.responseFailure,\r\n            code: error.response.status\r\n        }\r\n    } else if (error.request) {\r\n        console.log(\"ERROR IN REQUEST: \", error.toJSON());\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATION_MESSAGES.requestFailure,\r\n            code: \"\"\r\n        }\r\n    } else {\r\n        console.log(\"NETWORK ERROR: \", error.toJSON());\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATION_MESSAGES.networkError,\r\n            code: \"\"\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst API = ({\r\n    userSignup : (data) => {\r\n        return axiosInstance.post('/signup', data);\r\n    }\r\n});\r\n\r\n// for (const [key, value] of Object.entries(SERVICE_URLS)) {\r\n//     API[key] = (body, showUploadProgress, showDownloadProgress) =>\r\n//         axiosInstance({\r\n//             method: value.method,\r\n//             url: value.url,\r\n//             data: value.method === 'DELETE' ? {} : body,\r\n//             responseType: value.responseType,\r\n//             // TYPE: getType(value, body),\r\n//             onUploadProgress: function(progressEvent) {\r\n//                 if (showUploadProgress) {\r\n//                     let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n//                     showUploadProgress(percentCompleted);\r\n//                 }\r\n//             },\r\n//             onDownloadProgress: function(progressEvent) {\r\n//                 if (showDownloadProgress) {\r\n//                     let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n//                     showDownloadProgress(percentCompleted);\r\n//                 }\r\n//             }\r\n//         });\r\n// }\r\n\r\nexport { API };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}